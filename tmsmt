#!/bin/sh

# Copyright (c) 2016, Rice University
# All rights reserved.
#
# Author(s): Neil T. Dantam <ntd@rice.edu>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
#  OF THE POSSIBILITY OF SUCH DAMAGE.



## TODO: escape special characters in file names

# TMSMT_GUI=nil
# TMSMT_PAUSE=nil
# TMSMT_VERBOSE=nil


parse_long() {
    echo "$1" | cut -d = -f 2
}

while test "$1" != x-- -a "x$#" != x0; do
    case "$1" in
        -h|-\?|--help)
            # HELP TEXT
            cat <<EOF
Usage: tmsmt [OPTIONS] FILES...
Compute a task-motion plan

Options:
  -s SCENE_FILE               Start scene file
  -g SCENE_FILE               Goal scene file
  -d TASK_DOMAIN_FILE         Task Domain (PDDL) file
  -o OUTPUT_PLAN_FILE         Output plan file
  -r RESOLUTION               Discretization resolution
  -l SCRIPT_FILE              Load script file
  -m MAX_STEPS                Maximum number of task steps
  --gui                       Enable graphical interface
  --load-plan=PLAN_FILE       Load plan from file
  --write-facts=FILE          Write inititial task facts to FILE
  --python-shell              Start an interactive (CL)Python shell
  -v,--verbose                Be verbose
EOF
            # Examples:
            # export ROS_PACKAGE_PATH=/opt/ros/indigo/share
            # tmsmt -s 'package://baxter_description/urdf/baxter.urdf' \\
            #       -s file.robray
            exit 0
            ;;
        -s)
            shift;
            # TODO: escape special characters
            export TMSMT_SCENE_FILES="${TMSMT_SCENE_FILES} \"$1\""
            ;;
        -l)
            shift;
            # TODO: escape special characters
            export TMSMT_SCRIPT_FILES="${TMSMT_SCRIPT_FILES} \"$1\""
            ;;
        -g)
            shift;
            # TODO: escape special characters
            export TMSMT_GOAL_FILES="${TMSMT_GOAL_FILES} \"$1\""
            ;;
        -d)
            shift;
            # TODO: escape special characters
            export TMSMT_TASK_DOMAIN="$1"
            ;;
        -o)
            shift;
            # TODO: escape special characters
            export TMSMT_OUTPUT="$1"
            ;;
        -r)
            shift;
            export TMSMT_RESOLUTION="$1"
            ;;
        -m)
            shift;
            export TMSMT_MAX_STEPS="$1"
            ;;
        --load-plan=*)
            export TMSMT_INPUT=`parse_long "$1"`
            ;;
        --write-facts=*)
            export TMSMT_WRITE_FACTS=`parse_long "$1"`
            ;;
        --gui)
            export TMSMT_GUI=1
            ;;
        --python-shell)
            export TMSMT_PYTHON_SHELL=1
            ;;
        -v|--verbose)
            export TMSMT_VERBOSE=1
            ;;
        *)
            >&2 echo "tmsmt: unrecognized option '$1'"
            >&2 echo "Try 'tmsmt --help' for more information."
            exit 1
            ;;
    esac
    shift
done

if [ -n "$TMSMT_VERBOSE" ]; then
   env | grep "^TMSMT_"
fi


sbcl --non-interactive --eval '(require :tmsmt)' --eval '(tmsmt::tmp-command)'

# exec tmsmt.core --non-interactive --eval '(tmsmt::tmp-command)'
