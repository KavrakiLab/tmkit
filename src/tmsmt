#!/bin/sh

# Copyright (c) 2016-2017, Rice University
# All rights reserved.
#
# Author(s): Neil T. Dantam <ntd@rice.edu>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
#  OF THE POSSIBILITY OF SUCH DAMAGE.



## TODO: escape special characters in file names

# TMSMT_GUI=nil
# TMSMT_PAUSE=nil
# TMSMT_VERBOSE=nil

tmsmt_arg_error() {
    >&2 echo "tmsmt: $1"
    >&2 echo "Try 'tmsmt --help' for more information."
    exit 1
}

parse_filetype () {
    echo "$1" | sed -e 's/^.*\.\([^/.]*\)$/\1/'
}

parse_long() {
    echo "$1" | cut -d = -f 2
}

while test "x$1" != x-- -a "x$#" != x0; do
    case "$1" in
        -h|-\?|--help)
            # HELP TEXT
            cat <<EOF
Usage: tmsmt [OPTIONS] INPUT...
Compute a task-motion plan

Options:
  -t <task-file>              Task Domain or Facts (PDDL) file
  -l <script-file>            Load script file
  -s <scene-file>             Start scene file
  -g <scene-file>             Goal scene file
  -o <output-plan-file>       Output plan file
  -q <plan-file>              Initial configuration
  -s <max-steps>              Maximum number of task steps
  -m <motion-timeout>         Initial motion planning timeout
  -r <resolution>             Discretization resolution
  -T <times-file>             Append timing data to times-file
  --load-plan=<plan-file>     Load plan from file
  --write-facts=<file>        Write inititial task facts to FILE
  --gui                       Enable graphical interface
  --render                    Raytrace the play
  --camera-tf=<tf>            Camera position (quaternion-vector)
  --render-options=<opts>     Options for rendering
  --render-include=<file>     Include <file> in rendering output
  --render-fast               Enable options for fast rendering
  --render-medium             Enable options for medium-quality rendering
  --render-full-hd            Enable options for full HD (1920x1080) rendering
  --render-4k                 Enable options for full 4K rendering
  --encode-video              Encode renderings into video file
  --python-shell              Start an interactive (CL)Python shell
  -v,--verbose                Be verbose
  -h,-?,--help                Display this help and exit
  --version                   Output version information and exit


Environment:

  ROS_PACKAGE_PATH            Location of ROS packages, necessary to load URDF
  TMSMT_LISP                  Debugging option: Lisp command (default: sbcl)
  TMSMT_NO_CORE               Debugging option: Reload all code instead of saved core

Examples:

  tmsmt start.robray ops.pddl script.py -g goal.robray -o plan.tmp  Plan and write to plan.tmp

  tmsmt package://baxter_description/urdf/baxter.urdf...            Use a URDF scene

  tmsmt scene.robray plan.tmp --gui                                 Visualize plan

  tmsmt ops.pddl facts.pddl -o plan.tmp                             Compute a pure task plan


EOF
            exit 0
            ;;
        --version)
            export TMSMT_VERSION="1"
            ;;
        --version-man)
            export TMSMT_VERSION_MAN="1"
            ;;
        -t)
            shift;
            # TODO: escape special characters
            export TMSMT_PDDL_FILES="${TMSMT_PDDL_FILES} \"$1\""
            ;;
        -s)
            shift;
            # TODO: escape special characters
            export TMSMT_SCENE_FILES="${TMSMT_SCENE_FILES} \"$1\""
            ;;
        -l)
            shift;
            # TODO: escape special characters
            export TMSMT_SCRIPT_FILES="${TMSMT_SCRIPT_FILES} \"$1\""
            ;;
        -g)
            shift;
            # TODO: escape special characters
            export TMSMT_GOAL_FILES="${TMSMT_GOAL_FILES} \"$1\""
            ;;
        -o)
            shift;
            # TODO: escape special characters
            export TMSMT_OUTPUT="$1"
            ;;
        -r)
            shift;
            export TMSMT_RESOLUTION="$1"
            ;;
        -s|--steps)
            shift;
            export TMSMT_MAX_STEPS="$1"
            ;;
        -m|--motion-timeout)
            shift;
            export TMSMT_MOTION_TIMEOUT="$1"
            ;;
        -q)
            shift;
            export TMSMT_INITIAL_PLAN="$1"
            ;;
        -T)
            shift;
            export TMSMT_TIMES_FILE="$1"
            ;;
        --load-plan=*)
            export TMSMT_INPUT="`parse_long \"$1\"`"
            ;;
        --write-facts=*)
            export TMSMT_WRITE_FACTS="`parse_long \"$1\"`"
            ;;
        --gui)
            export TMSMT_GUI=1
            ;;
        --render)
            export TMSMT_RENDER=1
            ;;
        --render-options=*)
            export TMSMT_RENDER_OPTIONS="`parse_long \"$1\"`"
            ;;
        --render-include=*)
            export TMSMT_RENDER_INCLUDE="`parse_long \"$1\"`"
            ;;
        --render-fast)
            export TMSMT_RENDER_FAST=1
            ;;
        --render-medium)
            export TMSMT_RENDER_MEDIUM=1
            ;;
        --render-full-hd)
            export TMSMT_RENDER_FULL_HD=1
            ;;
        --render-4k)
            export TMSMT_RENDER_4K=1
            ;;
        --encode-video)
            export TMSMT_ENCODE_VIDEO=1
            ;;
        --camera-tf=*)
            export TMSMT_CAMERA_TF="`parse_long \"$1\"`"
            ;;
        --python-shell)
            export TMSMT_PYTHON_SHELL=1
            ;;
        -v|--verbose)
            export TMSMT_VERBOSE=1
            ;;
        *.*)
            # Dispatch on file type
            case `parse_filetype "$1"` in
                robray|urdf)
                    export TMSMT_SCENE_FILES="${TMSMT_SCENE_FILES} \"$1\""
                    ;;
                pddl)
                    export TMSMT_PDDL_FILES="${TMSMT_PDDL_FILES} \"$1\""
                    ;;
                py|lisp)
                    export TMSMT_SCRIPT_FILES="${TMSMT_SCRIPT_FILES} \"$1\""
                    ;;
                tmp)
                    export TMSMT_INPUT="$1"
                    ;;
                *)
                    tmsmt_arg_error "Unknown input type '$1'"
                    ;;
            esac
            ;;
        *)
            tmsmt_arg_error "Unrecognized option '$1'"
            ;;
    esac
    shift
done

## Construct call to Lisp core

test_bool() {
    if [ -z "$1" \
         -o "$1" = 0 \
         -o "$1" = false \
         -o "$1" = no ]
    then
        false
    else
        true
    fi
}

if [ -z "$TMSMT_LISP" ]; then
    export TMSMT_LISP=sbcl
fi

if [ -z "$TMSMT_CORE" ]; then
    export TMSMT_CORE="tmsmt.core"
fi


if [ -z "$TMSMT_PYTHON_SHELL" ]; then
    export TMSMT_LISP_ARGS="${TMSMT_LISP_ARGS} --non-interactive"
fi


if test_bool "$TMSMT_NO_CORE"; then
    export TMSMT_LISP_ARGS="${TMSMT_LISP} ${TMSMT_LISP_ARGS} --eval '(require :tmsmt)'"
else
    export TMSMT_LISP_ARGS="${TMSMT_CORE} ${TMSMT_LISP_ARGS} --eval '(require :tmsmt)'"
fi


if [ -n "$TMSMT_VERBOSE" ]; then
   env | grep "^TMSMT_"
fi

exec sh -c "exec ${TMSMT_LISP_ARGS} --eval '(tmsmt::tmp-command)'"
